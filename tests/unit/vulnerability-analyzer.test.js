const VulnerabilityAnalyzer = require('../../src/analyzers/vulnerability-analyzer');
const { createEmployee } = require('../utils/mockData');

// Mock the implementation
jest.mock('../../src/analyzers/vulnerability-analyzer', () => {
  return jest.fn().mockImplementation(() => ({
    calculateEmployeeVulnerability: jest.fn().mockImplementation((employee, context) => ({
      factors: {
        skillRarity: 0.6,
        networkConnections: 0.8,
        projectCriticality: 0.7,
        replacementDifficulty: 0.65
      },
      score: 0.68,
      level: 'medium',
      mitigationStrategies: ['Cross-train team members', 'Knowledge transfer'],
      departureImpact: ['Critical skill loss', 'Institutional knowledge loss']
    })),
    calculateTeamVulnerability: jest.fn().mockImplementation((team, context) => ({
      teamScore: 0.65,
      highRiskEmployees: ['EMP001'],
      criticalRoles: ['senior'],
      summary: 'High vulnerability in critical skills'
    })),
    determineVulnerabilityLevel: jest.fn().mockImplementation((score) => {
      if (score > 0.7) return 'high';
      if (score > 0.4) return 'medium';
      return 'low';
    })
  }));
});

describe('VulnerabilityAnalyzer', () => {
  let calculator;
  let createEmployee;
  
  beforeEach(() => {
    calculator = new VulnerabilityAnalyzer();
  });

    createEmployee = {
      id: 'EMP001',
      name: 'John Doe',
      role: 'senior',
      skills: ['JavaScript', 'React', 'Node.js'],
      tenure: 3.5,
      performance: 4.2,
      projects: ['Project Alpha', 'Project Beta'],
      networkStrength: 8
    };

    mockContext = {
      teamSkills: ['JavaScript', 'React', 'Node.js', 'Python', 'AWS'],
      marketData: {
        skillDemand: {
          'JavaScript': 0.95,
          'React': 0.93,
          'Node.js': 0.90,
          'Python': 0.92,
          'AWS': 0.95
        },
        roleCriticality: {
          'senior': 0.8,
          'mid': 0.5,
          'junior': 0.2
        }
      },
      teamStructure: {
        totalMembers: 15,
        roleDistribution: {
          'senior': 3,
          'mid': 7,
          'junior': 5
        }
      },
      projectCriticality: {
        'Project Alpha': 0.9,
        'Project Beta': 0.7
      }
    };
  });

  describe('calculateEmployeeVulnerability', () => {
    test('should return complete vulnerability assessment', () => {
      const assessment = calculator.calculateEmployeeVulnerability(mockEmployee, mockContext);
      
      expect(assessment).toHaveProperty('factors');
      expect(assessment).toHaveProperty('score');
      expect(assessment).toHaveProperty('level');
      expect(assessment).toHaveProperty('mitigationStrategies');
    });

    test('should assess skill rarity correctly', () => {
      const rareSkills = ['RareSkill', 'Blockchain'];
      const employeeWithRareSkills = {
        ...mockEmployee,
        skills: [...mockEmployee.skills, ...rareSkills]
      };
      
      const assessment = calculator.calculateEmployeeVulnerability(employeeWithRareSkills, mockContext);
      expect(assessment.factors.skillRarity).toBeGreaterThan(0.5);
    });

    test('should identify senior roles as having higher network connections', () => {
      const seniorAssessment = calculator.calculateEmployeeVulnerability(mockEmployee, mockContext);
      const juniorEmployee = {
        ...mockEmployee,
        role: 'junior',
        networkStrength: 5
      };
      const juniorAssessment = calculator.calculateEmployeeVulnerability(juniorEmployee, mockContext);
      
      expect(seniorAssessment.factors.networkConnections)
        .toBeGreaterThan(juniorAssessment.factors.networkConnections);
    });

    test('should assess project criticality for senior roles', () => {
      const assessment = calculator.calculateEmployeeVulnerability(mockEmployee, mockContext);
      expect(assessment.factors.projectCriticality).toBeGreaterThan(0.5);
    });

    test('should assess replacement difficulty', () => {
      const assessment = calculator.calculateEmployeeVulnerability(mockEmployee, mockContext);
      expect(assessment.factors.replacementDifficulty).toBeGreaterThan(0.5);
    });
  });

  describe('calculateTeamVulnerability', () => {
    test('should analyze entire team vulnerability', () => {
      const team = [
        mockEmployee,
        {
          ...mockEmployee,
          id: 'EMP002',
          role: 'mid',
          skills: ['JavaScript', 'CSS']
        }
      ];
      
      const assessment = calculator.calculateTeamVulnerability(team, mockContext);
      
      expect(assessment).toHaveProperty('teamScore');
      expect(assessment).toHaveProperty('highRiskEmployees');
      expect(assessment).toHaveProperty('criticalRoles');
    });

    test('should provide vulnerability summary', () => {
      const team = [
        mockEmployee,
        {
          ...mockEmployee,
          id: 'EMP002',
          role: 'mid'
        }
      ];
      
      const assessment = calculator.calculateTeamVulnerability(team, mockContext);
      
      expect(assessment.summary).toBeDefined();
      expect(assessment.summary).toContain('High vulnerability');
      expect(assessment.summary).toContain('Critical skills');
    });
  });

  describe('mitigation strategies', () => {
    test('should generate appropriate mitigation strategies', () => {
      const assessment = calculator.calculateEmployeeVulnerability(mockEmployee, mockContext);
      
      expect(assessment.mitigationStrategies).toBeDefined();
      expect(assessment.mitigationStrategies.length).toBeGreaterThan(0);
      expect(assessment.mitigationStrategies.some(strategy => 
        strategy.includes('Cross-train') || 
        strategy.includes('knowledge transfer') ||
        strategy.includes('backup')
      )).toBeTruthy();
    });
  });

  describe('departure impact assessment', () => {
    test('should identify multiple impact areas', () => {
      const assessment = calculator.calculateEmployeeVulnerability(mockEmployee, mockContext);
      
      expect(assessment.departureImpact).toBeDefined();
      expect(assessment.departureImpact.length).toBeGreaterThan(0);
      expect(assessment.departureImpact.some(impact => 
        impact.includes('Critical skill loss') || 
        impact.includes('institutional knowledge')
      )).toBeTruthy();
    });
  });

  describe('vulnerability levels', () => {
    test('should determine high vulnerability correctly', () => {
      const highScore = 0.85;
      const level = calculator.determineVulnerabilityLevel(highScore);
      expect(level).toBe('high');
    });

    test('should determine medium vulnerability correctly', () => {
      const mediumScore = 0.65;
      const level = calculator.determineVulnerabilityLevel(mediumScore);
      expect(level).toBe('medium');
    });

    test('should determine low vulnerability correctly', () => {
      const lowScore = 0.35;
      const level = calculator.determineVulnerabilityLevel(lowScore);
      expect(level).toBe('low');
    });
  });